--- @param e uiObjectTooltipEventData
local function uiObjectTooltipCallback2(e)

	local colorDict = {
		"black_color",
		"white_color",
		"normal_color",
		"normal_over_color",
		"normal_pressed_color",
		"active_color",
		"active_over_color",
		"active_pressed_color",
		"disabled_color",
		"disabled_over_color",
		"disabled_pressed_color",
		"link_color",
		"link_over_color",
		"link_pressed_color",
		"journal_link_color",
		"journal_link_over_color",
		"journal_link_pressed_color",
		"journal_topic_color",
		"journal_topic_over_color",
		"journal_topic_pressed_color",
		"journal_finished_quest_color",
		"journal_finished_quest_over_color",
		"journal_finished_quest_pressed_color",
		"answer_color",
		"answer_over_color",
		"answer_pressed_color",
		"header_color",
		"notify_color",
		"big_normal_color",
		"big_normal_over_color",
		"big_normal_pressed_color",
		"big_link_color",
		"big_link_over_color",
		"big_link_pressed_color",
		"big_answer_color",
		"big_answer_over_color",
		"big_answer_pressed_color",
		"big_header_color",
		"big_notify_color",
		"background_color",
		"focus_color",
		"health_npc_color",
		"health_color",
		"magic_color",
		"fatigue_color",
		"misc_color",
		"weapon_fill_color",
		"magic_fill_color",
		"positive_color",
		"negative_color",
		"count_color",
	}

	-- local tooltip = e.tooltip -- existing tooltip
	local tooltip = tes3ui.createTooltipMenu()

	for i = 1, #colorDict, 1 do
		local key = colorDict[i]
		local result = tes3ui.getPalette(key)
		local r = tostring(result[1])
		local g = tostring(result[2])
		local b = tostring(result[3])
		mwse.log("[ CE ] " .. key .. " :" .. r .. "," .. g .. "," .. b)

		local lbl = tooltip:createLabel{ text = key }
		lbl.color = result
	end

	tooltip:updateLayout()
end

--[[
    Init mod
]]
--- @param e initializedEventData
local function initializedCallback(e)

	-- init mod
	event.register(tes3.event.uiObjectTooltip, uiObjectTooltipCallback2)
end

--[[
    event hooks
]]
-- event.register(tes3.event.initialized, initializedCallback)

-- local w = {}
		-- w["name"] = equipped.name
		-- w["typeName"] = equipped.typeName
		-- w["chopMin"] = equipped.chopMin
		-- w["chopMax"] = equipped.chopMax
		-- w["slashMin"] = equipped.slashMin
		-- w["slashMax"] = equipped.slashMax
		-- w["thrustMin"] = equipped.thrustMin
		-- w["thrustMax"] = equipped.thrustMax
		-- w["enchantCapacity"] = equipped.enchantCapacity
		-- w["maxCondition"] = equipped.maxCondition
		-- w["speed"] = equipped.speed
		-- w["reach"] = equipped.reach
		-- w["value"] = equipped.value
		-- w["weight"] = equipped.weight

		-- local model = tooltip:findChild('PartHelpMenu_main')
		-- if (model) then
		-- 	for _, element in pairs(model.children) do

		-- 		local compareText = ''
		-- 		if (obj.objectType == 1346454871) then -- weapon
		-- 			if (element.name == "HelpMenu_name") then
		-- 				compareText = w["name"]
		-- 			elseif (element.name == "HelpMenu_weaponType") then
		-- 				compareText = w["typeName"]
		-- 			elseif (element.name == "HelpMenu_chop") then
		-- 				compareText = "Chop: " .. w["chopMin"] .. " - " .. w["chopMax"]
		-- 			elseif (element.name == "HelpMenu_slash") then
		-- 				compareText = "Slash: " .. w["slashMin"] .. " - " .. w["slashMax"]
		-- 			elseif (element.name == "HelpMenu_thrust") then
		-- 				compareText = "Thrust: " .. w["thrustMin"] .. " - " .. w["thrustMax"]
		-- 			elseif (element.name == "HelpMenu_EnchantCapacity") then
		-- 				compareText = w["enchantCapacity"]
		-- 			elseif (element.name == "HelpMenu_qualityCondition") then
		-- 				compareText = "Condition: " .. w["maxCondition"]
		-- 			elseif (element.name == "HelpMenu_weight") then
		-- 				compareText = "Weight: " .. w["weight"]
		-- 			end
		-- 		elseif (obj.objectType == 1346454871) then -- armor
		-- 			compareText = ''

		-- 		end

		-- 		mwse.log("[ CE ]     %s - %s (%s)", element.name, (element.text or ''), compareText)
		-- 		if (compareText ~= '') then

		-- 			-- add to existing element
		-- 			element.flowDirection = "left_to_right"
		-- 			local lbl = element:createLabel{ text = compareText }
		-- 			lbl.color = tes3ui.getPalette("answer_color")
		-- 			lbl.absolutePosAlignX = 1.0
		-- 			lbl.absolutePosAlignY = 0.0
		-- 			lbl.autoHeight = true
		-- 			lbl.autoWidth = true
		-- 			element:updateLayout()
		-- 		end

		-- 	end

		-- end

		----------------------------------------------------------------------------

		-- crashes in mwse
		-- for key, value in pairs(data.context:getVariableData()) do
		-- 	local t = value.type
		-- 	local v = value.value
		-- 	mwse.log("[ CE ]     key: %s - value (%s)%s ", key, tostring(t), tostring(v))
		-- end

--[[
    Create inline tooltips version 1
]]
--- @param e uiObjectTooltipEventData
--- @param stack tes3equipmentStack 
local function create_inline1(e, stack)
	local obj = e.object
	local etooltip = e.tooltip

	-- kinda dumb to create this (better use actual item props)
	-- BUT this should be compatible with all ui overhauls...

	-- first chache all existing fields
	local currentTable = {}
	local model = etooltip:findChild('PartHelpMenu_main')
	for _, element in pairs(model.children) do
		-- mwse.log("[ CE ]   %s: (%s)", element.name, (element.text or ''))
		if (element.text == nil) then
			mwse.log("[ CE ]  !!! element.text is nil: (" .. obj.id .. ") at " .. element.name)
		else
			currentTable[element.name] = element.text
		end
	end

	-- now create the equipped tooltip and modify it
	-- !!! this overwrites the UI and triggers this here event again (but is handled by isEquipped check)
	local tooltip = tes3ui.createTooltipMenu { item = stack.object, itemData = stack.itemData }

	model = tooltip:findChild('PartHelpMenu_main')
	for _, element in pairs(model.children) do
		-- replace text with cached text again
		local equrawText = element.text
		local curRawText = currentTable[element.name]
		element.text = curRawText

		-- redundant checks
		if (curRawText == nil) then
			mwse.log("[ CE ]  !!! curRawText is nil: (" .. obj.id .. ") at " .. element.name .. " / equrawText = " .. equrawText)
			goto continue1
		end
		if (equrawText == nil) then
			mwse.log("[ CE ]  !!! equrawText is nil: (" .. obj.id .. ") at " .. element.name .. " / curRawText = " .. curRawText)
			goto continue1
		end

		-- TODO: investigate mod compatibility
		-- do not compare the type in vanilla (UI expansion is handled by the next check)
		if (string.find(curRawText, "Type: ")) then
			goto continue1
		end
		-- do not compare fields without a colon
		local _, j = string.find(curRawText, ":")
		if (j == nil) then
			goto continue1
		end

		-- option A: inline
		local equText = string.sub(equrawText, j + 2)
		local curText = string.sub(curRawText, j + 2)
		element.text = element.text .. " (" .. equText .. ")"

		-- mwse.log("[ CE ]   COMP %s: (%s)", curText, equText)
		local status = compare_text(curText, equText, element.name)

		-- set colors
		-- TODO add arrow icons
		local color = "normal_color"
		if (config.useColors) then
			if (status == 1) then
				color = "fatigue_color" -- better
			elseif (status == 2) then
				color = "health_color" -- worse
			end
		end

		-- update color
		if (color ~= "normal_color") then
			element.color = tes3ui.getPalette(color)
		end

		::continue1::
	end
end